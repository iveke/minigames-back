name: .NET CI/CD

on:
  push:
    branches:
      - main # Or your default branch, e.g., master, development
  pull_request:
    branches:
      - main # Or your default branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest # You can also use windows-latest or macos-latest

    steps:
    - uses: actions/checkout@v4 # Checks out your repository code

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x' # Specify your .NET SDK version, e.g., '6.x', '7.x', '8.x'

    - name: Restore dependencies
      run: dotnet restore minigames-back.sln # Replace Minigame.sln with the actual name of your solution file if different

    - name: Build project
      run: dotnet build minigames-back.sln --no-restore # Builds your solution, --no-restore ensures it uses already restored packages

    - name: Run tests
      run: dotnet test Tests/Tests.csproj --no-build --verbosity normal # Runs tests for the solution, --no-build uses already built binaries

    - name: Display test results (optional)
      if: always() # This step will always run, even if tests fail
      run: |
        echo "Test execution completed. Check above logs for details."
        # If you have specific test result formats (e.g., TRX), you might want to upload them here.
        # Example for uploading TRX:
        # find . -name "*.trx" -print -exec cat {} \; # Just to see the content
        # find . -name "*.trx" -print -exec upload-artifact -name "TestResults" -path {} \; # Requires an action like actions/upload-artifact